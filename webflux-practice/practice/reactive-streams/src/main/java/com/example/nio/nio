InputStream
- Closable 구현. 명시적으로 close 하거나 try-with-resources 문 사용
- read : stream 으로 데이터를 읽고 읽은 값은 반환, -1 이라면 끝에 도달했다는 것을 의미
- close : stream 을 닫고 더 이상 데이터를 읽지 않는다
- 어떤 source 로부터 데이터 읽을지에 따라 다양한 구현체 존재
- FileInputStream, ByteArrayInputStream, FilterInputStream, ObjectInputStream, PipedInputStream, SequenceInputStream, StringBufferInputStream 등

OutputStream
- write 시 바로 전송하지 않고 버퍼에 저장한 다음 일정량의 데이터가 모이면 한번에 전달
- Closable 을 구현하고 있어서 try-with-resource 문법을 사용할 수 있음
- write : stream 으로 데이터를 씀
- flush : 버퍼에 저장된 데이터를 출력하고 비움
- close : stream 을 닫고 더 이상 쓰지 않음
- 어떤 destination 에 데이터를 쓸 지에 따라 다양한 구현체 존재
- FileOutputStream, ByteArrayOutputStream, FilterOutputStream, ObjectOutputStream, PipedOutputStream 등


Java IO 의 한계
- 동기 blocking 으로 동작
  - read, write 메소드는 커널이 응답을 돌려줄때까지 아무것도 할 수 없음
  - I/O 요청이 발생할 때마다 쓰레드를 새로 할당하면, 스레드를 생성 및 관리하는 비용과 컨텍스트 스위칭으로 cpu 자원 소모
- 커널 버퍼에 직접 접근 불가, 따라서 메모리 copy 발생
  - hw 에서 값을 읽어오면 disk controller가 DMA 를 통해서 커널 버퍼에 값을 복사
  - 커널 버퍼에서 jvm 버퍼로 복사
  - jvm 버퍼, jvm 메모리에 있기 때문에 gc 대상이 되고 이는 cpu 자원을 소모